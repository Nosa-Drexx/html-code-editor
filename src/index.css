:root {
--colorB: rgba(0, 0, 0, 0.94);
--colorLB: rgba(96, 92, 92, 0.68);
--colorW: white;
--colorDG: darkgrey;
--colorSG: slategray;
--colorLG: rgb(28, 195, 28); 
--colorR: red;
}
html {
  box-sizing: border-box;
}
*,*::after,*::before {
  box-sizing: inherit;
}
body {
  margin: 0;
  padding: 0;
}
.UserSettingsContainer {
  background: var(--colorB);
  padding: 0.5rem;
  width: 100%;
  display: flex;
  flex-flow: row nowrap;
  justify-content: space-between;
  align-items: center;
  gap: 2rem;
}
textarea::placeholder {
  color: var(--colorW);
}
iframe {
  width: 100%;
  height: 100%;
  word-wrap: break-word;
  border: none;
  overflow-y: auto;
  overflow-x: hidden;
}

.editor {
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  background: var(--colorLB);
  color: var(--colorW);
  font-size: 1.3rem;
  /*overflow handled  with inline styles in react components*/
}

/*For Custom scroll bar*/
.editor::-webkit-scrollbar {
 width: 0.5em;
}
.editor::-webkit-scrollbar-track {
 box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
}
.editor::-webkit-scrollbar-thumb {
 background: var(--colorDG);
 outline: 1px solid var(--colorSG);
}

.align-btns {
  height: 100%;
  width: 70%;
  display: flex;
  gap: 0.5rem;
  justify-content: flex-end;
  align-items: center;
}
.U-button {
  width: 10%;
  height: 80%;
  border: none;
  background-color: transparent;
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
  border-radius: 2px;
  background-image: url("./Images/vertical-layout.png");
  transition: transform 0.5s;
}
.U-button:hover {
  transform: scale(1.1);
  cursor: pointer;
}
.vertical{
  background-image: url("./Images/vertical-layout.png");
}
.vertical-reverse{
  background-image: url("./Images/vertical-reverse-layout.png");
}
.horizontal {
  background-image: url("./Images/horizontal-layout.png");
}
.horizontal-reverse {
  background-image: url("./Images/horizontal-reverse-layout.png");
}
.logo-holder {
  width: 30%;
  height: 80%;
  background: transparent url("./Images/codepen-clone-logo-name.png") no-repeat center;
  background-size: contain;
}
.animated-dropdown {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  top: -50px;
  width: 26%;
  height: 5em;
  left: 40%;
  margin: 0, auto;
  padding: 0.1rem 0;
  background: var(--colorB);
  border-radius: 5px;
  z-index: 1000;
}
.animated-dropdown div{
  display:flex;
  gap: 0.5rem;
  justify-content: center;
  align-items: center;
  font-size: 1rem;
  font-weight: bold;
  padding: 0 0.2rem;
  font-family: Verdana, Geneva, Tahoma, sans-serif;
  color: var(--colorW);
}
/*styles for animated-dropdown*/
.red {
  border: 3px solid var(--colorR);
}
.green{
  border: 3px solid var(--colorLG);
}
.a-red{
  color: var(--colorR);
}
.a-green {
  color: var(--colorLG);
}

.align-btns .run {
  cursor: pointer;
  font-weight: bold;
  color: var(--colorW);
  font-size: 1.5rem;
  background: green;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 3px;
  transition: transform 0.5s;
}
.align-btns .run:hover {
  transform: scale(1.1);
}
.align-btns .run:active {
  transform: scale(0.5);
}

/*style for input checkbox(sync action toggle)*/
input[type="checkbox"]{
  -webkit-appearance: none;
  appearance: none;
  background: var(--colorW);
  margin: 0;
  font: inherit;
  color: currentColor;
  width: 2.5em;
  height: 2.5em;
  border: 0.15em solid currentColor;
  transform: translateY(-0.075em);
  display: grid;
  place-content: center;
  cursor: pointer;
}

input[type="checkbox"]::before {
  content:"";
  width: 1.75em;
  height: 1.75em;
  transform: scale(0);
  transition: 120ms transform ease-in-out;
  box-shadow:  inset 2em 2em var(--colorLG);
}
input[type="checkbox"]:checked::before{
  transform: scale(1);
}

/*For react Split api */
.gutter {
  flex-shrink: 0;
  flex-grow: 0;
  background: var(--colorB)
}
.gutter-horizontal {
  cursor: col-resize;
}
.gutter-vertical {
  cursor: row-resize;
}

